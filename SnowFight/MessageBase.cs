// automatically generated by the FlatBuffers compiler, do not modify

namespace SnowFight.Sample
{

using System;
using FlatBuffers;

public sealed class MessageBase : Table {
  public static MessageBase GetRootAsMessageBase(ByteBuffer _bb) { return GetRootAsMessageBase(_bb, new MessageBase()); }
  public static MessageBase GetRootAsMessageBase(ByteBuffer _bb, MessageBase obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public MessageBase __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public string Cmd { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetCmdBytes() { return __vector_as_arraysegment(4); }
  public Vec3 Vec { get { return GetVec(new Vec3()); } }
  public Vec3 GetVec(Vec3 obj) { int o = __offset(6); return o != 0 ? obj.__init(o + bb_pos, bb) : null; }
  public Vec3 Vec2 { get { return GetVec2(new Vec3()); } }
  public Vec3 GetVec2(Vec3 obj) { int o = __offset(8); return o != 0 ? obj.__init(o + bb_pos, bb) : null; }

  public static void StartMessageBase(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddCmd(FlatBufferBuilder builder, StringOffset cmdOffset) { builder.AddOffset(0, cmdOffset.Value, 0); }
  public static void AddVec(FlatBufferBuilder builder, Offset<Vec3> vecOffset) { builder.AddStruct(1, vecOffset.Value, 0); }
  public static void AddVec2(FlatBufferBuilder builder, Offset<Vec3> vec2Offset) { builder.AddStruct(2, vec2Offset.Value, 0); }
  public static Offset<MessageBase> EndMessageBase(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MessageBase>(o);
  }
  public static void FinishMessageBaseBuffer(FlatBufferBuilder builder, Offset<MessageBase> offset) { builder.Finish(offset.Value); }
};


}
